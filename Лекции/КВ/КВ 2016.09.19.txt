Численное решение системы уравнений
	СЛАУ:
	Точные методы:
		1) Метод обратной матрицы
			X = (A^-1)B
		2) Метод определителей
		3) Метод Гаусса
	
	Метод Гаусса:
		a11x1 + a12x2 + ... + a1nxn = b1
		a21x1 + a22x2 + ... + a2nxn = b2
		...
		an1x1 + an2x2 + ... + annxn = bn
		
		AX = B
		a = alpha
		b = beta
		x1 + a12x2 + ... + a1,n-1xn-1 + a,nxn = b1
		        x2 + ... + a2,n-1xn-1 + a,nxn = b2
							.......
				                           xn = bn
		
		xn -> xn-1 -> ... -> x2 -> x1
		
		Алгоритм:
			1) (0)
				alp[j,i] := a[j,i]
				alp]j,0] := b[j]
				k := 0
			2) (k+1)
				alp[j,i] := alp[1,i]/alp[1,1]
			3)
				alp[j,i] := alp[j,i] - alp[j,1]*alp[1,i]
			4)
				k := k+1
			5) Останов СЛАУ  (xn = beta[n])
			
		(+) Простота
		(-) Низкая точность для некоторых СЛАУ
		(-) Нельзя добиться нужной точности путём увеличения числа итераций
	
	Метод простой итерации:
		1) Из системы * AX = B получаем СЛАУ в итеративном виде:
			{x[1] = alp[1,1]x[1] + alp[1,2]x[2] + ... + beta[1]
			{x[2] = alp[2,1]x[1] + alp[2,2]x[2] + ... + beta[2]
			{...
			{x[n] = alp[n,1]x[1] + alp[n,2]x[2] + ... + beta[n]
		
		X(0) -> X(1) -> X(2) -> ... -> X(n) = E (E - корень)
		X(0) = X1(0) = 0;
		       X2(0) = 0;
			   X3(0) = 0;
			   X(k+1) = F(X^k)
			   
		F'(E) = E
		F'(X(n-1)) = X(n) = E
		Необходимоо гарантировать сходимость к корню
		
	Метрические пространства
		Матричный способ измерения расстояния
			Примеры:
				1) g1(x,y) = max |xi - yi|, i = 1..n
				2) g2(x,y) = E(i=1..n) |xi - yi|
				3) g3(x,y) = sqrt(E(i=1..n) |xi - yi|^2)
			Треб. к матрицам:
				1) g(x,y) >= 0
				2) g(x,y) = 0 при x=y
				3) g(x,y) + g(y,z) >= g(x,z)
			Достаточо выполнение сжимающего отображения по одной из метрик:
				1) m1 = max(i=1..n) E(j=1..n) |alp[i,j]| - максимальная сумма по модулю по строкам
				2) m2 = max(j=1..n) E(i=1..n) |alp[i,j]|
				3) m3 = sqrt(E(i=1..n) E(j=1..n) alp[i,j]**2)
				Нужно чтобы выполнялось условие mg < 1 - для одной из метрик 1..3
			Для сходимости необходимо (не недостаточно)  преобладание диагональных элементов исх. СЛАУ (a[i,j] = max(j=1..n) |a[i,j]|
			Для уравнений сжимающего отображения:
				g(F'(X), F'(y)) <= фg(x,y)
				ф <= 1
				т. Банаха
				|f(x) - f(y)| <= ф|x-y|
				
				|f(x) - f(y)|
				|x-y| ~ |f'(x)|
				т. Лагранжа
				ф - константа Липшица
				
		Метод Зейделя
			Моделирование метода простой итерации
			x(k+1) = sum(j=1..i-1) alp[i,j] * x(k+1)[j] + sum(j=i..n)alp[i,j]x(k)[j] + beta[i]
	
	Нелинейные системы уравнений:
		Метод простой итерации:
			{F1(x1,x2,...,xn)=0	+(x1-x1)
			{F2(x1,x2,...,xn)=0	+(x2-x2)
			{F3(x1,x2,...,xn)=0	+(x3-x3)
			||
			{x1 = f1(x1,x2,...,xn)
			{x2 = f2(x1,x2,...,xn)
			{x3 = f3(x1,x2,...,xn)
			X(k+1) = f(X(n))
			X(0) = (0,0,...,0)
			
			Условия сходимости:
				alp[i,j] = max(G) |df[i] / dx[j]|
				G - область поиска решений
				1)m1=
				2)m2=
				3)m3=
				Достаточно для сходимости mg<1 (g=1,2,3)
		Метод Ньютона
			J - матрица Якоби
				| dF[1]/dx[1] dF[1]/dx[2] ... dF[1]/dx[n]	|
			J =	|	..................................		|
				| dF[n]/dx[1] dF[n]/dx[2] ... dF[n]/dx[n]	|
			
			x(k+1 = x(k) - F(x(k)) = 1/(F'(x(k))
			X(k+1) = X(k) - F(X(k)) * J^-1 X(k)