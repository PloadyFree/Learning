ООП
Алексей Сергеевич

Причины повышенной сложности программных систем:
	Сложность реальной предметной области, из которой исходит заказ на разработку
	Трудность..

Сложность реальной предметной области
	Нестыковка между пользователями системы и её разработчиками
	Изменение требований к программной системе уже в процессе разработки
	Встаёт задача о сопровождении ПО

Термины:
	сопровождение по - устранение ошибок
	эволюция по - внесение изменений в систему в ответ на изменившиеся требования к ней
	сохранение по - использование всех возможных и невозможных способов для поддержания жизни в дряхлой и распадающейся на части системе

Трудности управления процессом разработки
	Основная задача разработки - создание иллюзии простоты, т.е. защита пользователей от сложности описываемого предмета
	Размеры современных программных систем исчисляются миллионами строк на языках высокого уровня
	При разложении её на составные части, мы получаем сотни, а иногда тысячи отдельных модулей
	Такой объём работ птребует привлечения команды разработчиков, в идеале как можно меньшей по численности
	При коллективном выполнении проекта главной задачей руководства является поддержание единства и целостности разработки

Гибкость ПО
	Программирование обладает предельной гибкостью. Разработчик может сам себя обеспечить необходимыми элемнтами, относящимися к любому уровню абстракции
	В отличие от строительной индустрии, где существуют единые стандарты на конструктивные элементы, в программной индустрии таких стандартов нет.
	
	Слабая стандартизация приводит к высокой трудоёмкости программных разработок.

Большие дискетные системы
	Даже простые непривычные системы могут иметь сложное поведение ввиду наличия хаоса, который приводит случайность в поведении системы.
	ПРограммные системы имеют конечное число состояний (являются дискретными системами). В больших программных системах это число очень велико.
	Каждое событие, внешнее по отношению к программной системе, может перевести её в новое состояние.
	Переход из одного состояния в другое не всегда детерминирован.
	При проектировании системы следует разделять их на части так, чтобы одна часть минимально возделйствовала на другую.
	
	Большое число состояний программных систем является главной причиной их обязательного тестирования.

Признаки сложной системы
	Систему называют сложной, если она состоит из большого числа взаимосвязанных и взаимодействующих между собой элементов.
	1. Сложные системы являются иерархическими и состоят из взаимосвязанных подсистем, которые в свою очередь также могут быть разделены на подсистемы, и т.д.
	2. Выбор, какие компоненты в данной системе считаются элементарными, произволен и остаётся на усмотрение разработчика
	3. Внутрикомпонентная связь сильнее, чем связь между компонентами
	4. Иерархические системы обычно состоят из немногих типов подсистем, по-разному скомбинированных и организованных
	5. Любая работающая сложная система является результатом развития работавшей более простой системы

Рекомендации по разработке сложных систем
	1. Умение выполнять декомпозцицию системы равносильно умению превращать сложную систему в простую
	2. Программная система должна не только допускать возможность модификации, но содержать средства, позволяющие сделать процесс модификации максимально простым.
	3. Развитие системы должно происходить непрерывно от эксперементальной модели до модели, находящейся в эксплуатации.

Признаки сложной системы. Выводы:
	1. Сложная система основана на ограниченном числе базовых процессов, определяющих существо системы.
	2. Сложная система не имеет детального формального описания.
	3. Сложная система обладает выраженной иерархичностью.
	4. Сложная система находится в постоянном равитии и, как следствие, не имеет завершённого состояния.
	5. Сложная система разложима на более простые составляющие, вплоть до элементарных
	6. Сложность системы определяется сложностью связей между её состаляющими.
	7. Сложная система выполняет только функции управления по отношению к составляющим.

Декомпозиция
	Алгоритмическая декомпозиция
		Алгоритмическая декомпозиция основывается на разбиении системы на действия - алгоритмы.
	Объектно-ориентированная декомпозиция
		Объектно-ориентированная декомпозиция обеспечивает разбиение на взаимодействующие объекты некоторой системы, имитирующей процессы, происходящие в предметной области поставленной задачи.