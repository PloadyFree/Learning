Модульность
	Модульность - это разделение программы на фрагменты, которые компилируются по отдельности, но могут устанавливать связи с другими модулями
	Связи между модулями - это их предположение о работе друг друга
	Правила эффективного составления модулей из классов и объектов:
		1. Особенности состемы, подверженные изменениям, слудет скрывать в отдельных модулях;
		2. В качестве межмодульных можно использовать только те элементы, вероятность изменения которых мала
		3. Все структуры данных должны быть обособлены в модуле
		4. Доступ к внутренним структурам данных будет возможен для всех процедур этого модуля и закрыт для всех других
		5. Доступ к данным из модуля должен осуществляться только через процедуры данного модуля
	Традиционно в структурном проектировании модульность, как правило, проявляется в группировке подпрограмм по логическим группам на основе критериев связности и целостности. В объектно-ориентрированном программировании модульность имеет несколько иной характер, поскольку она предусматривает физическую упаковку классов и объектов, существенно отличающихся от подпрограмм.
	Конечной целью декомпозиции программы на модули является снижение затрат на программирование благодаря независимому проектированию и тестированию.
	Структура каждого модуля должна быть достаточно простой для понимания, допускать независимую реализацию других модулей и не влиять на поведение других модулей, а также позволять лёгкое изменение проектных решений/
	Изменяемые детали системы следует скрывать в отдельных модулях. Открытыми следует оставлять лишь элементы, обеспечивающие свзяь между модулями, вероятность изенения которых крайне мала.
	Все структуры данных в модулях должны быть закрыты. Они могут оставаться доступными для процедур внутри модуля, но должны быть недоступными для всех внешних подпрограмм.
	Доступ к информации, хранящейся внутри модуля, должен осуществляться с помощью вызова процедур данного модуля.
	
	Модульность - это свойство системы, разложенной на цельные, но слабосвязанные между собой модули.
	Принципы абстракции, инкапсуляции и модульности, являются взаимодействующими. Объект позволяет определить чёткие границы абстракции, а инкапсуляция и модульность создают барьеры между абстракциями.
	
Иерархия
	Иерархия - это ранжирование или упорядочивание абстракций.
	Наследование - is-a
	
	Два типа клиентов:
		Объекты, выполняющие опреации над экземпляром данного класса
	
	Множественное наследование
		class Cherry : public Plant, public Flower, public FruitVegetable { ... }
	
	Агреграция - включать что-либо как часть
	Тип - это точная характеристика структуры и поведения? присущих некоторой совокупности объектов
	Контроль типов - это правило использования объектов, не допускающее или ограничивающее взаимную замену объектов разных классов
	Языки программирования со строгим типизированием имеют ряд приемуществ:
		В отсутствии контроля типов работа программ в большинстве языков может завершиться непредстазуемо
		В большинстве систем цикл редактирование-компиляция-отладка настолько утомителен, что раннее обнаружение ошибок крайне желательно.
		3. Объявление типов облегчает документирование программ
		Многие компиляторы способны генерировать более эффективный объектный код, если типы объявлены явно

		Полиморфизм - один из наболее 